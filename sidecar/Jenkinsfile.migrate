// Declarative Pipeline Syntax

pipeline {
  agent {
    kubernetes {
      defaultContainer 'karma'
      yaml """\
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: karma
            image: sugarcrm/ea-karma:node18_php82
            imagePullPolicy: IfNotPresent
            securityContext:
              runAsUser: 1000
            tty: true
            command:
            - cat
          imagePullSecrets:
            - name: sugarcrmci-dockerhub-v1-ro-secret
      """.stripIndent()
    }
  }

  stages {
    stage('Build') {
      steps {
        container('karma') {
          gitStatusWrapper(gitHubContext: 'Build', description: 'in progress...', successDescription: 'passed', failureDescription: 'failed') {
            sh 'yarn install --ignore-scripts'
            sh 'node_modules/gulp/bin/gulp.js'
          }
        }
      }
    }

    stage('Jira Ticket') {
      when { changeRequest() }

      steps {
        echo "GIT_COMMIT: ${env.GIT_COMMIT}"
        echo "BRANCH_NAME: ${env.BRANCH_NAME}"
        echo "CHANGE_FORK: ${env.CHANGE_FORK}"
        echo "CHANGE_TITLE: ${env.CHANGE_TITLE}"
        echo "CHANGE_AUTHOR: ${env.CHANGE_AUTHOR}"
        echo "CHANGE_BRANCH: ${env.CHANGE_BRANCH}"
        echo "CHANGE_TARGET: ${env.CHANGE_TARGET}"

        container('karma') {
          script {
            gitStatusWrapper(
              gitHubContext: 'commit-message-check', description: 'running',
              successDescription: 'Passed', failureDescription: 'Jira Ticket Number was not found in the first line of the commit')
            {
              def msg = sh(script: 'git log -n 1 --first-parent --no-merges --format=%s%b', returnStdout: true).trim()
              def firstLine = msg.split('\n')[0]
              
              echo "Checking Commit Message (1st line): ${firstLine}"

              if (firstLine =~ /([A-Z]+-\d+)/) {
                echo "Jira ticket found in commit"
              } else if (firstLine =~ /^Merge (remote-tracking|pull)/) {
                echo "Merge Commit Found"
              } else {
                error('Jira Ticket Number was not found in the first line of the commit')
              }
            }
          }
        }
      }
    }

    stage('Enforce Coding Standards') {
      when { changeRequest() }

      steps {
        container('karma') {
          gitStatusWrapper(gitHubContext: 'Enforce Coding Standards', description: 'in progress...', successDescription: 'passed', failureDescription: 'failed') {
            sh """
              FILES_TO_LINT=`git diff --name-only remotes/origin/${env.CHANGE_TARGET} HEAD | grep \'.js\$\'| xargs echo | sed \'s/ /,/g\'`
              FILES_TO_LINT=`echo \$FILES_TO_LINT | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*\$//'`
              if [ ! -z \$FILES_TO_LINT ]; then
                  node_modules/gulp/bin/gulp.js lint --files \$FILES_TO_LINT
              fi
            """
          }
        }
      }
    }

    stage('Unit Tests') {
      steps {
        container('karma') {
          gitStatusWrapper(gitHubContext: 'Unit Tests', description: 'in progress...', successDescription: 'passed', failureDescription: 'failed') {
            sh """
              node_modules/gulp/bin/gulp.js karma --ci --coverage --path="$WORKSPACE" --browsers dockerChromeHeadless
              rm -rf node_modules
              cd karma/sidecar/coverage-html/ && mv Chrome* headless-chrome
            """
          }
        }

        publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: 'karma/sidecar/coverage-html/headless-chrome',
            reportFiles: 'index.html', reportName: 'Code Coverage Report'
        ])

        junit 'karma/sidecar/test-results.xml'
      }
    }
  }
}
